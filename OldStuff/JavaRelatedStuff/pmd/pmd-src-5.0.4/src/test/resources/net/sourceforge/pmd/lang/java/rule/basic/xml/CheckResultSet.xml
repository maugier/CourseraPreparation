<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description>
        	<![CDATA[
				The result set is appropriately tested before using it, no violation.
     		]]>
     	</description>
        <expected-problems>0</expected-problems>
        <code>
        	<![CDATA[
				public class ResultSetTesting
				{
				    public String goodBehavior() throws SQLException
				    {
				        String firsString = "";
				        Statement stat = (Statement) conn.createStatement();
				        ResultSet rst = stat.executeQuery("SELECT name FROM person");

				        if (rst.next())
				        {
				            firsString = rst.getString(1);
				        }
				        else
				        {
				            // deal properly with the problem..
				        }
				        return firsString;
				    }
				}
     		]]>
 		</code>
    </test-code>
    <test-code>
        <description>
        	<![CDATA[
				This most common violation case, not testing is done before a call to 'last()'.
     		]]>
     	</description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
				public class ResultSetTesting
				{
					public void executeSql(Statement statement, String query) throws SQLException
				    {
				        ResultSet rs = statement.executeQuery(query);
				        String object = rs.getString(1);
				        rs.last();
				        object.hashCode();
				    }
				}
     		]]>
 		</code>
    </test-code>
        <test-code>
        <description>
        	<![CDATA[
				This most common violation case, not testing is done before a call to 'first()'.
     		]]>
     	</description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
				public class ResultSetTesting
				{
					public void executeSql(Statement statement, String query) throws SQLException
				    {
				        ResultSet rs = statement.executeQuery(query);
				        String object = rs.getString(1);
				        rs.first();
				        object.hashCode();
				    }
				}
     		]]>
 		</code>
    </test-code>
        <test-code>
        <description>
        	<![CDATA[
				Using a 'while' instead of 'if' shouldn't result in a violation.
     		]]>
     	</description>
        <expected-problems>0</expected-problems>
        <code>
        	<![CDATA[
				public class ResultSetTesting
				{
					public void executeSql(Statement statement, String query) throws SQLException
				    {
				        ResultSet rst = stat.executeQuery("SELECT name FROM person");
        // stupid while loop to have an unrelated while
        while (_count > 0) {
            _count--;
        }
				        while (rst.next())
				        {
				            firsString = rst.getString(1);
				        }
				    }
				}
     		]]>
 		</code>
    </test-code>

    <test-code>
        <description>#942 CheckResultSet False Positive</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Test {
    public int countReadOnlyForwardOnlyJDBC() throws SQLException, ClassNotFoundException {
        int _count = 0;

        if (conn == null) {
            conn = getConnection();
            if (conn == null) {
                return null;
            }
        }

        if (stmt == null) {
            stmt = conn.createStatement(
                ResultSet.TYPE_FORWARD_ONLY, 
                ResultSet.CONCUR_READ_ONLY);
        }

        ResultSet _rs = stmt.executeQuery(QueryString);

        while (_rs.next() != false) {
            _count++;
        }   

        return _count;
    }
    

    public int countReadOnlyForwardOnlyJDBC2() throws SQLException, ClassNotFoundException {
        int _count = 0;

        if (conn == null) {
            conn = getConnection();
            if (conn == null) {
                return null;
            }
        }

        if (stmt == null) {
            stmt = conn.createStatement(
                ResultSet.TYPE_FORWARD_ONLY, 
                ResultSet.CONCUR_READ_ONLY);
        }

        ResultSet _rs = stmt.executeQuery(QueryString);
        _rs.next();  // This line should throw a PMD violation.  < - - - violation here
        while (_rs.next() != false) {
            _count++;
        }   

        return _count;
    }
}
        ]]></code>
    </test-code>
</test-data>
